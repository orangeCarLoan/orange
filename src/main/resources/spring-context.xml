<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
	<!-- 开启spring容器自动扫描 -->
	<context:component-scan base-package="org.orange.carloan">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 引入mysql连接配置文件 -->
	<context:property-placeholder location="classpath:mysql.properties"
		ignore-resource-not-found="true" ignore-unresolvable="true" />
	<!-- 	<bean id="dataSource"     
		  class="org.springframework.jdbc.datasource.DriverManagerDataSource">     
		    <property name="driverClassName" value="${mysql.driverClassName}" />  
		    <property name="url" value="${mysql.url}" />  
		    <property name="username" value="${mysql.username}" />     
		    <property name="password" value="${mysql.password}" />  
		</bean> -->
	<!-- 数据源 -->
	<bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${mysql.driverClassName}"></property>
		<property name="url" value="${mysql.url}"></property>
		<property name="username" value="${mysql.username}"></property>
		<property name="password" value="${mysql.password}"></property>
		<property name="initialSize" value="15"></property><!-- 初始连接数 -->
		<property name="maxActive" value="50"></property><!-- 最大连接数 -->
		<property name="minIdle" value="10"></property><!-- 最小空闲数 -->
		<property name="maxIdle" value="20"></property><!-- 最大空闲数 -->
		<property name="removeAbandonedTimeout" value="10"></property>
<!-- 			超时时间10秒 -->
		<property name="defaultAutoCommit" value="false"></property>
		<property name="removeAbandoned" value="true"></property><!-- 是否回收超时连接 -->
		<property name="maxWait" value="1000"></property><!-- 单位毫秒，超时等待时间 -->
<!-- 		连接被抛弃时是否打印输出到日志中 -->
		<property name="logAbandoned" value="true" />
<!-- 		每次空闲连接被回收时，需要检查的连接数量 -->
		<property name="numTestsPerEvictionRun" value="15" />
<!-- 		验证查询，获取当前连接数据库的时间 -->
		<property name="validationQuery" value="SELECT NOW() FROM DUAL"></property>
	</bean>
	
	<bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="${mysql.driverClassName}"></property>
	    <property name="url" value="${mysql.url}"></property>
	    <property name="username" value="${mysql.username}"></property>
	    <property name="password" value="${mysql.password}"></property>        
	</bean>
	
	
	
	<!-- mybatis的sessionfactory工厂 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource1"></property>
		<!-- 如果有多个包需要同时取类别名， 包与包之间采用,或;间隔 -->
		<property name="typeAliasesPackage" value="org.orange.carloan.beans"></property>
		<property name="mapperLocations" value="classpath*:org/orange/carloan/*mag/mapper/*Mapper.xml"/>
		<property name="configLocation" value="classpath:mybatis.xml" /> 
	</bean>
	<!-- mybatis的mapper引射器 -->
	<bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="
		org.orange.carloan.adminmag.mapper;
		org.orange.carloan.carMessagemag.mapper;
		org.orange.carloan.contractinformationmag.mapper;
		org.orange.carloan.dividemag.mapper;
		org.orange.carloan.letteronmag.mapper;
		org.orange.carloan.makeloanmag.mapper;
		org.orange.carloan.signcheckmag.mapper;
		org.orange.carloan.signmag.mapper;
		org.orange.carloan.userCreditmag.mapper;
		org.orange.carloan.userIdentitymag.mapper;
		org.orange.carloan.userMessagemag.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
	</bean>







	<!-- 配置JPASessionFactory -->
	<bean id="localEntityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource2"></property>
		<!-- 配置JPA采用Hibernate底层框架实现 -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
		</property>
		<!-- 扫描ORM映射关系 -->
		<property name="packagesToScan">
			<list>
				<value>org.orange.carloan.beans</value>
			</list>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			</props>
		</property>
	</bean>
	
	<!-- 将JPA接口与SessionFactory进行关联，用于扫描Repository接口类（dao层） --> 
	<jpa:repositories base-package="org.orange.carloan" entity-manager-factory-ref="localEntityManagerFactoryBean"></jpa:repositories>  


 




		<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        	<!-- 配置数据源 -->
        	<property name="dataSource" ref="dataSource1"></property>
        </bean>
        <!-- 事务管理器 -->
		<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
			<property name="entityManagerFactory" ref="localEntityManagerFactoryBean"></property>
		</bean>

<!-- <bean id="jotm" class="org.springframework.transaction.jta.JotmFactoryBean" /> -->
	<!-- 接下来配置事务管理器 -->
	<!-- <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
 -->
 
<!--   <bean id="txManager"
         class="org.springframework.transaction.jta.JtaTransactionManager">
         <property name="userTransaction" ref="jotm"></property>
     </bean> -->
	<!-- spring容器处理事务2种方式：编程式事务管理，声明式事务管理 <tx:annotation-driven transaction-manager="transactionManager"/> 
		@Transactional() -->

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" read-only="true" />
			<tx:method name="save*" read-only="false" isolation="DEFAULT"
				propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="update*" read-only="false" isolation="DEFAULT"
				propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="del*" read-only="false" isolation="DEFAULT"
				propagation="REQUIRED" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="fooServiceOperation"
			expression="execution(* org.orange.carloan.*mag.service.impl.*ReadServiceImpl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation" />
	</aop:config>
	
	
	
	
	<tx:advice id="txAdvice2" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" read-only="true" />
			<tx:method name="save*" read-only="false" isolation="DEFAULT"
				propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="update*" read-only="false" isolation="DEFAULT"
				propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="del*" read-only="false" isolation="DEFAULT"
				propagation="REQUIRED" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="fooServiceOperation2"
			expression="execution(* org.orange.carloan.*mag.service.impl.*WritServiceImpl.*(..))" />
		<aop:advisor advice-ref="txAdvice2" pointcut-ref="fooServiceOperation2" />
	</aop:config>
	<!-- 开启切面注解 -->
	<aop:aspectj-autoproxy/> 

</beans>        